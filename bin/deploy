#!/usr/bin/env ruby

require 'json'
require 'pp'
require 'slop'

def version
  @version ||= begin
    data = JSON.parse(File.read('./package.json'))
    data['version']
  end
end

opts = Slop.parse do |o|
  o.bool    '-s', '--stable', 'indicates that you are updating the stable version'
  o.string  '-e', '--environment' , 'indicates the desired environment you wish to deploy to', default: 'staging'
  o.on      '-v', '--version', 'prints current version of the SDK (for sanity check)' do
    puts "Current version is #{version}"
    exit
  end
end

def version_or_environment(opts)
  opts[:environment] == 'production' ? version : opts[:environment]
end

def execute(cmd)
  puts "\n***************************************************************************"
  puts "$ #{cmd}"
  system(cmd)
end

puts "Deploying current dist/tml-#{version}.js as tools/tml/#{version_or_environment(opts)}/tml.js ...\n\n"

execute('(grunt build)')
execute("aws s3 cp dist/tml.js s3://trex-snapshots/tools/tml/#{version_or_environment(opts)}/tml.js")
execute("aws s3 cp dist/tml.min.js s3://trex-snapshots/tools/tml/#{version_or_environment(opts)}/tml.min.js")
execute("bin/invalidate tools/tml/#{version}/tml.js tools/tml/#{version_or_environment(opts)}/tml.min.js")

# only if you say so, update the stable release
if opts[:stable] and opts[:environment] == 'production'
  puts "Tagging current version as #{version}"
  execute("git tag #{version}")
  execute("git push")

  execute("aws s3 cp dist/tml.js s3://trex-snapshots/tools/tml/stable/tml.js")
  execute("aws s3 cp dist/tml.min.js s3://trex-snapshots/tools/tml/stable/tml.min.js")
  execute("bin/invalidate tools/tml/stable/tml.js tools/tml/stable/tml.min.js")
end

puts "\n\nCongratulations, the tml v#{version} has been deployed...\n\n"
